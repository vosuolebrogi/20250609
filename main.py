import os
import io
import zipfile
import base64
import asyncio
import logging
from typing import List, Tuple
from datetime import datetime

from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from openai import AsyncOpenAI
from PIL import Image
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
openai_client = AsyncOpenAI(api_key=os.getenv('OPENAI_API_KEY'))

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_FILE_SIZE = 20 * 1024 * 1024  # 20MB
SUPPORTED_FORMATS = {'.jpg', '.jpeg', '.png'}

class ImageAnalyzer:
    def __init__(self):
        self.openai_client = openai_client

    async def analyze_image(self, image_data: bytes, filename: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenAI Vision API –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            base64_image = base64.b64encode(image_data).decode('utf-8')
            
            response = await self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

–∞. –ï—Å—Ç—å –ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ? (–¥–∞/–Ω–µ—Ç)
–±. –ï—Å—Ç—å –ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è? (–¥–∞/–Ω–µ—Ç) 
–≤. –ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∫—Ä—É–ø–Ω–µ–µ –≤—Å–µ–≥–æ: –ª—é–¥–∏ –∏–ª–∏ –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–µ–¥–º–µ—Ç—ã?
–≥. –ö–∞–∫–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞?
–¥. –°–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–∏–¥–∫–µ –∏–ª–∏ –≤—ã–≥–æ–¥–µ? (–¥–∞/–Ω–µ—Ç)

–û—Ç–≤–µ—Ç—å—Ç–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:
–∞. [–æ—Ç–≤–µ—Ç]
–±. [–æ—Ç–≤–µ—Ç]
–≤. [–æ—Ç–≤–µ—Ç]
–≥. [–æ—Ç–≤–µ—Ç]
–¥. [–æ—Ç–≤–µ—Ç]"""
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{base64_image}"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=200
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {filename}: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"

    def is_valid_image(self, data: bytes) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        try:
            with Image.open(io.BytesIO(data)) as img:
                img.verify()
            return True
        except Exception:
            return False

    def parse_analysis_results(self, analysis_text: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        results = {
            'realistic_photo': 'unknown',
            'illustration': 'unknown', 
            'main_object': 'unknown',
            'background_color': 'unknown',
            'discount_message': 'unknown'
        }
        
        lines = analysis_text.split('\n')
        for line in lines:
            line = line.strip()
            if line.startswith('–∞.'):
                results['realistic_photo'] = 'yes' if '–¥–∞' in line.lower() else 'no'
            elif line.startswith('–±.'):
                results['illustration'] = 'yes' if '–¥–∞' in line.lower() else 'no'
            elif line.startswith('–≤.'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ "–≤."
                obj_text = line[2:].strip().lower()
                if '–ª—é–¥–∏' in obj_text or '—á–µ–ª–æ–≤–µ–∫' in obj_text:
                    results['main_object'] = 'people'
                elif any(word in obj_text for word in ['—Ç–µ–ª–µ—Ñ–æ–Ω', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å']):
                    results['main_object'] = 'tech'
                elif any(word in obj_text for word in ['–µ–¥–∞', '–ø—Ä–æ–¥—É–∫—Ç', '—Ç–æ–≤–∞—Ä', '–æ–¥–µ–∂–¥–∞']):
                    results['main_object'] = 'product'
                else:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç
                    words = obj_text.split()
                    if words:
                        results['main_object'] = words[0][:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            elif line.startswith('–≥.'):
                color_text = line[2:].strip().lower()
                colors_map = {
                    '–±–µ–ª—ã–π': 'white', '—á–µ—Ä–Ω—ã–π': 'black', '–∫—Ä–∞—Å–Ω—ã–π': 'red',
                    '—Å–∏–Ω–∏–π': 'blue', '–∑–µ–ª–µ–Ω—ã–π': 'green', '–∂–µ–ª—Ç—ã–π': 'yellow',
                    '—Å–µ—Ä—ã–π': 'gray', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'brown', '—Ä–æ–∑–æ–≤—ã–π': 'pink'
                }
                for ru_color, en_color in colors_map.items():
                    if ru_color in color_text:
                        results['background_color'] = en_color
                        break
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
                    words = color_text.split()
                    if words:
                        results['background_color'] = words[0][:8]
            elif line.startswith('–¥.'):
                results['discount_message'] = 'yes' if '–¥–∞' in line.lower() else 'no'
        
        return results

    def create_new_filename(self, original_filename: str, analysis_results: dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        name, ext = os.path.splitext(original_filename)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ö–µ–º—É –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        # –§–æ—Ä–º–∞—Ç: R[0/1]-I[0/1]-[obj]-[color]-S[0/1]_original
        photo = '1' if analysis_results['realistic_photo'] == 'yes' else '0'
        illus = '1' if analysis_results['illustration'] == 'yes' else '0'
        obj = analysis_results['main_object']
        color = analysis_results['background_color']
        sale = '1' if analysis_results['discount_message'] == 'yes' else '0'
        
        # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_name = "".join(c for c in name if c.isalnum() or c in ('-', '_'))[:20]
        
        new_name = f"R{photo}-I{illus}-{obj}-{color}-S{sale}_{clean_name}{ext}"
        
        return new_name

class TelegramBot:
    def __init__(self):
        self.analyzer = ImageAnalyzer()

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ *–ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*

–ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ ZIP –∞—Ä—Ö–∏–≤–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.

üìã *–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:*
–∞. –ï—Å—Ç—å –ª–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ?
–±. –ï—Å—Ç—å –ª–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è?
–≤. –ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –∫—Ä—É–ø–Ω–µ–µ –≤—Å–µ–≥–æ?
–≥. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
–¥. –ï—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–∏–¥–∫–µ?

üìù *–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:*
1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤
3. README —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π —Å—Ö–µ–º—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è

üöÄ *–°—Ö–µ–º–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:*
`R1-I0-people-blue-S0_original.jpg`
‚Ä¢ R1 = —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ
‚Ä¢ I0 = –Ω–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è  
‚Ä¢ people = –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç
‚Ä¢ blue = —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
‚Ä¢ S0 = –Ω–µ—Ç —Å–∫–∏–¥–∫–∏

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ä–∞–∑

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞!
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN
        )

    async def extract_images_from_zip(self, zip_data: bytes) -> List[Tuple[str, bytes]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞"""
        images = []
        
        try:
            with zipfile.ZipFile(io.BytesIO(zip_data), 'r') as zip_file:
                for file_info in zip_file.filelist:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    if file_info.is_dir():
                        continue
                    
                    filename = file_info.filename
                    file_ext = os.path.splitext(filename.lower())[1]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
                    if file_ext not in SUPPORTED_FORMATS:
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                    try:
                        file_data = zip_file.read(file_info)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        if self.analyzer.is_valid_image(file_data):
                            images.append((filename, file_data))
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                            if len(images) >= 10:
                                break
                                
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–π–ª {filename}: {e}")
                        continue
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ZIP –∞—Ä—Ö–∏–≤–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ZIP –∞—Ä—Ö–∏–≤–∞: {str(e)}")
        
        return images

    async def process_zip_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ZIP —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if not update.message.document:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP —Ñ–∞–π–ª.")
                return
            
            document = update.message.document
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not document.file_name.lower().endswith('.zip'):
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .zip")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if document.file_size > MAX_FILE_SIZE:
                await update.message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024*1024)}MB")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ZIP –∞—Ä—Ö–∏–≤...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            zip_data = await file.download_as_bytearray()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await processing_message.edit_text("üìÇ –ò–∑–≤–ª–µ–∫–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∞—Ä—Ö–∏–≤–∞...")
            images = await self.extract_images_from_zip(bytes(zip_data))
            
            if not images:
                await processing_message.edit_text("‚ùå –í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (JPG/PNG).")
                return
            
            await processing_message.edit_text(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            results = []
            images_with_analysis = []  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
            
            for i, (filename, image_data) in enumerate(images, 1):
                await processing_message.edit_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}/{len(images)}: {filename}")
                
                description = await self.analyzer.analyze_image(image_data, filename)
                results.append((filename, description))
                images_with_analysis.append((filename, image_data, description))
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                await asyncio.sleep(0.5)
            
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤
            await processing_message.edit_text("üì¶ –°–æ–∑–¥–∞—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤...")
            renamed_zip_data = await self.create_renamed_zip(images_with_analysis)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
            await processing_message.edit_text("üìä –§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            table = self.format_results_table(results)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await processing_message.delete()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(table) > 4096:
                parts = self.split_message(table, 4096)
                for i, part in enumerate(parts):
                    await update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(table, parse_mode=ParseMode.MARKDOWN)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤
            await update.message.reply_text(
                "üì§ *–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!*\n\n"
                "üìÅ –§–∞–π–ª—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞\n"
                "üìã –í –∞—Ä—Ö–∏–≤–µ –µ—Å—Ç—å README —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π —Å—Ö–µ–º—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
            original_name = document.file_name.replace('.zip', '')
            new_archive_name = f"{original_name}_analyzed_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=io.BytesIO(renamed_zip_data),
                filename=new_archive_name,
                caption="üìÇ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º"
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ZIP —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

    def format_results_table(self, results: List[Tuple[str, str]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
        if not results:
            return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        
        table = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*\n\n"
        table += f"üïí –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
        table += f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}\n\n"
        
        for i, (filename, description) in enumerate(results, 1):
            table += f"*{i}\\. {self.escape_markdown(filename)}*\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            lines = description.split('\n')
            formatted_analysis = ""
            for line in lines:
                line = line.strip()
                if line and not line.startswith('–û—à–∏–±–∫–∞'):
                    if line.startswith(('–∞.', '–±.', '–≤.', '–≥.', '–¥.')):
                        formatted_analysis += f"  {self.escape_markdown(line)}\n"
                    else:
                        formatted_analysis += f"{self.escape_markdown(line)}\n"
            
            if formatted_analysis.strip():
                table += f"üìã *–ê–Ω–∞–ª–∏–∑:*\n{formatted_analysis}\n"
            else:
                table += f"üìù {self.escape_markdown(description)}\n\n"
            
            table += "‚îÄ" * 40 + "\n\n"
        
        return table

    def escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
        special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in special_chars:
            text = text.replace(char, f'\\{char}')
        return text

    def split_message(self, text: str, max_length: int) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        parts = []
        current_part = ""
        
        lines = text.split('\n')
        for line in lines:
            if len(current_part + line + '\n') > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = line + '\n'
                else:
                    # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë
                    while len(line) > max_length:
                        parts.append(line[:max_length])
                        line = line[max_length:]
                    current_part = line + '\n'
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        return parts

    async def create_renamed_zip(self, images_with_analysis: List[Tuple[str, bytes, str]]) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
        zip_buffer = io.BytesIO()
        
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            used_names = set()  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω
            
            for i, (original_filename, image_data, analysis_text) in enumerate(images_with_analysis):
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                analysis_results = self.analyzer.parse_analysis_results(analysis_text)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                new_filename = self.analyzer.create_new_filename(original_filename, analysis_results)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                original_new_filename = new_filename
                counter = 1
                while new_filename in used_names:
                    name, ext = os.path.splitext(original_new_filename)
                    new_filename = f"{name}_{counter:03d}{ext}"
                    counter += 1
                
                used_names.add(new_filename)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤
                zip_file.writestr(new_filename, image_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π —Å—Ö–µ–º—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            readme_content = """–°—Ö–µ–º–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:

R[0/1] - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ (1=–¥–∞, 0=–Ω–µ—Ç)
I[0/1] - –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è (1=–¥–∞, 0=–Ω–µ—Ç)  
[obj] - –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç (people/tech/product/–¥—Ä—É–≥–æ–µ)
[color] - –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (white/black/red/blue/–∏ —Ç.–¥.)
S[0/1] - –°–∫–∏–¥–∫–∞/–≤—ã–≥–æ–¥–∞ (1=–¥–∞, 0=–Ω–µ—Ç)

–ü—Ä–∏–º–µ—Ä: R1-I0-people-blue-S0_photo123.jpg
–û–∑–Ω–∞—á–∞–µ—Ç: —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ, –Ω–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è, –ª—é–¥–∏, —Å–∏–Ω–∏–π —Ñ–æ–Ω, –Ω–µ—Ç —Å–∫–∏–¥–∫–∏

–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
            zip_file.writestr("README_naming_scheme.txt", readme_content)
        
        zip_buffer.seek(0)
        return zip_buffer.getvalue()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
    openai_api_key = os.getenv('OPENAI_API_KEY')
    
    if not telegram_token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    if not openai_api_key:
        logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = TelegramBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(telegram_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(MessageHandler(filters.Document.ZIP, bot.process_zip_file))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def handle_other_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."
        )
    
    application.add_handler(MessageHandler(filters.ALL & ~filters.Document.ZIP, handle_other_messages))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 